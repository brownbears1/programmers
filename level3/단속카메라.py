"""
문제 개황당하네

먼저 주어진 routes에서 첫 list는 차량이고 2번째 list는 진입, 진출 이다.
예를 들어 [[-20,15], [-14,-5], [-18,-13], [-5,-3]])에서
1번째 차량은 -20에 진입해서 15에 빠져나간 것이다. 여기서 -20 ~ 15라 보면 된다.
2번째 차량은 -14 ~ 5, 3번째는 -18 ~ -13, 마지막은 -5 ~ -3이다.

문제는 간단하게 해결할 수 있는데 최소 카메라 설치이므로 진출하는 숫자 순으로 오름차순 정렬을 진행하고
처음으로 빠져나가는 진출 숫자를 기준으로 다음 진입 숫자와 비교한다.
기준잡은 진출 숫자보다 다음 진입 숫자가 더 크면 기준 숫자를 해당 차량의 진출 숫자로 변경하고 카메라를 설치하면 끝이다.

예시에서 -15에 설치해 첫 번째, 세 번째 차량 단속, -5에 설치해 두 번째, 네 번째 차량 단속이라 했는데 잘못된거 같다.
-5에 설치하면 첫 번째 차량도 단속이 가능하다.

다시 돌아와 문제 해결 방법대로 예시를 진행하면
1. 진출 숫자로 오름차순 정렬
2. routes 반복문 진행
3. 가장 첫 번째로 빠져나가는 차량 3 번째의 진출 숫자인 -13에 카메라 설치
4. 두 번째로 빠져나가는 차량 2 번째의 진입 숫자와 대소 비교 (카메라 설치 숫자(-13) < 2번째 진입 숫자(-14))
5. -13에 설치하여 두 번째 차량도 단속이 가능하므로 카메라 설치 X
6. 세 번째로 빠져나가는 차량 4 번째의 진입 숫자와 대소 비교 (카메라 설치 숫자(-13) < 4번째 진입 숫자(-5))
7. -13에 설치한 카메라로 단속할 수 없으므로 세 번째 차량의 진출 숫자인 -3에 카메라 설치
8. 네 번째로 빠져나가는 차량 1 번째의 진입 숫자와 대소 비교 (카메라 설치 숫자(-5) < 4번째 진입 숫자(15))
9. -5에 설치하야 첫 번째 차량도 단속이 가능하므로 카메라 설치 X

총 -13 (3, 2, 1 번째 차량), -5 (4, 1 번째 차량)에 카메라를 설치하면 되므로 답은 2
"""
import sys


def solution(routes):
    answer = 0
    routes.sort(key=lambda x: x[1])
    camera = sys.maxsize * -1

    for route in routes:
        if camera < route[0]:
            camera = route[1]
            answer += 1

    return answer


assert solution([[-20, 15], [-14, -5], [-18, -13], [-5, -3]]) == 2
